package com.tang.model;

import com.google.common.base.Strings;
import com.jfinal.aop.Before;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;
import com.jfinal.plugin.activerecord.tx.Tx;
import com.tang.bean.RequestBean;
import com.tang.model.base.BaseDailyWork;
import com.tang.util.DateUtils;
import com.tang.util.IDKit;
import com.tang.util.ParamKit;
import com.tang.util.SysConstant;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class DailyWork extends BaseDailyWork<DailyWork> {
    public static final DailyWork dao = new DailyWork();

    /**
     * 新建事务
     *
     * @param requestBean
     * @return
     */
    @Before(Tx.class)
    public Record addDaiyWork(RequestBean requestBean) {
        String title = ParamKit.checkObjectNotNull(requestBean, "title");
        String workType = ParamKit.checkObjectNotNull(requestBean, "type");
        String beginTimeStr = ParamKit.checkObjectNotNull(requestBean, "beginTime");
        String endTimeStr = ParamKit.checkObjectNotNull(requestBean, "endTime");
        Date beginTime = DateUtils.formateDate(beginTimeStr, SysConstant.TIMEFORMAT.yyyyMMddHHmm);
        Date endTime = DateUtils.formateDate(endTimeStr, SysConstant.TIMEFORMAT.yyyyMMddHHmm);
        String desText = ParamKit.checkObjectNotNull(requestBean, "desText");
        String commanderId = ParamKit.checkObjectNotNull(requestBean, "commanderId");
        String executorId = ParamKit.checkObjectNotNull(requestBean, "executorId");
        Record record = new Record();
        record.set("id", IDKit.uuid())
                .set("isDelete", SysConstant.ISDELETE.NO)
                .set("createTime", DateUtils.getCurrentDate())
                .set("updateTime", DateUtils.getCurrentDate())
                .set("title", title)
                .set("workType", Strings.isNullOrEmpty(workType) ? null : Integer.valueOf(workType))
                .set("beginTime", beginTime)
                .set("endTime", endTime)
                .set("title", title)
                .set("desText", desText)
                .set("commanderId", commanderId)
                .set("executorId", executorId);
        Db.save("daily_work", record);
        return record;
    }

    /**
     * 获取事务列表
     *
     * @param requestBean
     * @return
     */
    public Page<Record> queryDailyWork(RequestBean requestBean) {
        String collegeId = ParamKit.checkObjectNotNull(requestBean, "collegeId");
        String schoolId = ParamKit.checkObjectNotNull(requestBean, "schoolId");
        String title = ParamKit.checkObjectNotNull(requestBean, "title");
        String workType = ParamKit.checkObjectNotNull(requestBean, "type");
        String beginTimeStr = ParamKit.checkObjectNotNull(requestBean, "beginTime");
        String endTimeStr = ParamKit.checkObjectNotNull(requestBean, "endTime");
        String commanderId = ParamKit.checkObjectNotNull(requestBean, "commanderId");
        String executorId = ParamKit.checkObjectNotNull(requestBean, "executorId");
        int pageNumber = requestBean.getPageInfo().getCurrentPage();
        int pageSize = requestBean.getPageInfo().getPageSize();
        StringBuilder sqlExcept = new StringBuilder("FROM daily_work WHERE isDelete = ? AND commanderId in(SELECT id FROM teacher WHERE collegeId = ? AND schoolId = ? AND isDelete = ?)");
        List<Object> paras = new ArrayList<Object>();
        paras.add(SysConstant.ISDELETE.NO);
        paras.add(collegeId);
        paras.add(schoolId);
        paras.add(SysConstant.ISDELETE.NO);
        if (!Strings.isNullOrEmpty(title)) {
            sqlExcept.append(" AND title LIKE ? ");
            paras.add("%" + title + "%");
        }
        if (!Strings.isNullOrEmpty(workType)) {
            sqlExcept.append(" AND workType = ? ");
            paras.add(Integer.valueOf(workType));
        }
        if (!Strings.isNullOrEmpty(beginTimeStr)) {
            Date beginTime = DateUtils.formateDate(beginTimeStr, SysConstant.TIMEFORMAT.yyyyMMddHHmm);
            sqlExcept.append(" AND beginTime >= ? ");
            paras.add(beginTime);
        }
        if (!Strings.isNullOrEmpty(endTimeStr)) {
            Date endTime = DateUtils.formateDate(endTimeStr, SysConstant.TIMEFORMAT.yyyyMMddHHmm);
            sqlExcept.append(" AND endTime <= ? ");
            paras.add(endTime);
        }
        if (!Strings.isNullOrEmpty(commanderId)) {
            sqlExcept.append(" AND commanderId = ? ");
            paras.add(commanderId);
        }
        if (!Strings.isNullOrEmpty(executorId)) {
            sqlExcept.append(" AND executorId = ? ");
            paras.add(executorId);
        }
        Page<Record> recordPage = Db.paginate(pageNumber, pageSize, "SELECT *", sqlExcept.toString(), paras.toArray());
        if (null == recordPage){
            return recordPage;
        }
        for (Record record : recordPage.getList()){
            Record commanderTeacher = Db.findFirst("SELECT * FROM teacher WHERE id = ? AND isDelete = ?", record.get("commanderId"), SysConstant.ISDELETE.NO);
            record.set("commanderTeacher",(null != commanderTeacher) ? commanderTeacher.getColumns() : null);
            Record executorTeacher = Db.findFirst("SELECT * FROM teacher WHERE id = ? AND isDelete = ?", record.get("executorId"), SysConstant.ISDELETE.NO);
            record.set("executorTeacher",(null != executorTeacher) ? executorTeacher.getColumns() : null);
        }
        return recordPage;
    }
}
